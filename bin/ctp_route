#!/usr/bin/env bash

BIN_ROOT_PATH=$(readlink $HOME/.bin)

source $BIN_ROOT_PATH/utils/common.sh

############################ SETUP FUNCTIONS
delete_route() {
    local entry_name="$1"
    local entry_item="$2"

    msg "Trying to delete route entry of $entry_name."

    route \
        delete \
        "$entry_item" \
        > /devnull 2>&1

    ret="$?"
    success "Delete route entry."
}

add_route() {
    local entry_name="$1"
    local ip_addr="$2"
    local mask="$3"
    local gateway="$4"

    msg "Trying to add route entry for $entry_name."

    route \
        -n add \
        -net "$ip_addr" \
        -netmask "$mask" \
        "$gateway" \
        > /devnull 2>&1

    ret="$?"
    success "Successfully created route entry."
}

setup_route() {

    local route_table=( \
        "proxy, 3.20.128.6, 255.255.252.0, 10.189.172.1" \
        "github, 10.152.32.50, 255.255.252.0, 10.189.172.1" \
        "o365, 10.69.144.92, 255.255.252.0, 10.189.172.1" \
        "jira, 3.239.244.206, 255.255.252.0, 10.189.172.1" \
        "printer, 10.166.248.171, 255.255.252.0, 10.189.172.1" \
        "nuc, 10.189.155.75, 255.255.254.0, 10.189.172.1" \
        "ccm, 10.189.140.34, 255.255.254.0, 10.189.172.1")

    msg "Setup route table."

    for i in "${!route_table[@]}"; do
        IFS=', ' read -r -a entry <<< "${route_table[i]}"
        add_route   "${entry[0]}" \
                    "${entry[1]}" \
                    "${entry[2]}" \
                    "${entry[3]}"
    done

    ret="$?"
    success "Successfully setup route table."
}

reset_route() {
    local route_table=( \
        "proxy, 3.20.128/22" \
        "jira, 3.239.244/22" \
        "o365, 10.69.144/22" \
        "github, 10.152.32/22" \
        "printer, 10.166.248/22" \
        "nuc, 10.189.154/23" \
        "ccm, 10.189.140/23")

    msg "Reset route table."

    for i in "${!route_table[@]}"; do
        IFS=', ' read -r -a entry <<< "${route_table[i]}"
        delete_route    "${entry[0]}" \
                        "${entry[1]}"
    done

    ret="$?"
    success "Successfully reset route table."
}

show_route() {
    local route_table=$(netstat -nr -f inet)

    msg "Show route table."
    msg "$route_table"

    ret="$?"
    success "Successfully show route table."
}

############################ MAIN()
program_must_exist "route"
program_must_exist "netstat"

case "$1" in
    set)
        setup_route
        ;;
    reset)
        reset_route
        ;;
    show)
        show_route
        ;;
    *)
        error "You must define [set|show|reset] as command line parameter."
        ;;
esac

